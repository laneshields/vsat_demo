<!DOCTYPE html>
<html lang="en">
<head>
    <title>128T VSAT Testing</title>
    <meta name="application-name" content="netdata">

    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">

    <meta property="og:locale" content="en_US" />
    <meta property="og:image" content="https://cloud.githubusercontent.com/assets/2662304/22945737/e98cd0c6-f2fd-11e6-96f1-5501934b0955.png"/>
    <meta property="og:url" content="http://my-netdata.io/"/>
    <meta property="og:type" content="website"/>
    <meta property="og:site_name" content="netdata"/>
    <meta property="og:title" content="netdata - real-time performance monitoring, done right!"/>
    <meta property="og:description" content="Stunning real-time dashboards, blazingly fast and extremely interactive. Zero configuration, zero dependencies, zero maintenance." />

    <link rel="stylesheet" type="text/css" href="vsat.css">
</head>
<script>
// this section has to appear before loading dashboard.js

// Select a theme.
// uncomment on of the two themes:

var netdataTheme = 'default'; // this is white
//var netdataTheme = 'slate'; // this is dark


// Set the default netdata server.
// on charts without a 'data-host', this one will be used.
// the default is the server that dashboard.js is downloaded from.

</script>

<!--
    Load dashboard.js

    to host this HTML file on your web server,
    you have to load dashboard.js from the netdata server.

    So, pick one the two below
    If you pick the first, set the server name/IP.

    The second assumes you host this file on /usr/share/netdata/web
    and that you have chown it to be owned by netdata:netdata
-->
<script type="text/javascript" src="/netdata/dashboard.js?v20170105-7"></script>

<script>
// Set options for TV operation
// This has to be done, after dashboard.js is loaded

// destroy charts not shown (lowers memory on the browser)
NETDATA.options.current.destroy_on_hide = true;

// set this to false, to always show all dimensions
NETDATA.options.current.eliminate_zero_dimensions = true;

// lower the pressure on this browser
NETDATA.options.current.concurrent_refreshes = false;

// if the tv browser is too slow (a pi?)
// set this to false
NETDATA.options.current.parallel_refresher = true;

// always update the charts, even if focus is lost
NETDATA.options.current.stop_updates_when_focus_is_lost = false;

// Since you may render charts from many servers and any of them may
// become offline for some time, the charts will break.
// This will reload the page every RELOAD_EVERY minutes

//var RELOAD_EVERY = 5;
//setTimeout(function(){
//    location.reload();
//}, RELOAD_EVERY * 60 * 1000);

</script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
<script src="/ifacectl_client.js"></script>
<script src="/sopt_client.js"></script>
<script src="/window_scaling_client.js"></script>
<script src="/downloadFile/socket.io/socket.io.js"></script>
<body>

<div style="width: 100%; text-align: center;">
    <h1>128T VSAT Testing</h1>
</div>
<div style="width: 100%; height: 24vh; text-align: center; display: inline-block;">
    <div style="width: 100%; height: 15px; text-align: center; display: inline-block;">
    </div>
    <div style="width: 75%; height: calc(100% - 15px); text-align: center; display: inline-block;">
        <br/>
        <div data-netdata="net.{{ internal_interface }}"
             data-host="/netdata/"
             data-title="Download Bandwidth"
             data-chart-library="dygraph"
             data-width="100%"
             data-height="100%"
             data-after="-300"
             data-append-options="abs"
             data-dygraph-type="stacked"
             data-dygraph-valuerange="[0, 10000]"
             data-legend="no"
             data-colors="#00ADEF #00ADEF"
             ></div>
    </div>
</div>
<div style="width: 100%; height: 15px;"></div>
<div style="width: 100%; text-align: center; display: inline-block; position: relative;">
    <div style="width: 10%; height: 100%; text-align: center; display: inline-block; float: left;">
        <H1>Controls</H1>
        <div>
            <b>Session Optimization</b>
        </div>
        <div class="onoffswitch">
            <input type="checkbox" name="onoffswitch" class="onoffswitch-checkbox" id="soptState" onclick="toggleSopt(this);" checked>
            <label class="onoffswitch-label" for="soptState">
                <span id="soptState-inner" class="onoffswitch-inner"></span>
                <span class="onoffswitch-switch"></span>
            </label>
        </div>
        <div>
            <b>Window Scaling</b>
        </div>
        <div class="largesmallswitch">
            <input type="checkbox" name="largesmallswitch" class="largesmallswitch-checkbox" id="windowScaling" onclick="toggleScaling(this);" checked>
            <label class="largesmallswitch-label" for="windowScaling">
                <span id="windowScaling-inner" class="largesmallswitch-inner"></span>
                <span class="largesmallswitch-switch"></span>
            </label>
        </div>
        <div>
            <b>Additional Path Impairments</b>
        </div>
        <div>
            <span>Loss: </span><span id="inetLossSpan"></span><span>%</span>
            <input type="range" id="inetLoss" min="0" max="10" oninput="updateSpan(this)">
            <span>Delay: </span><span id="inetDelaySpan"></span><span>ms</span>
            <input type="range" id="inetDelay" min="0" max="1000"  oninput="updateSpan(this)">
            <span>Jitter: </span><span id="inetJitterSpan"></span><span>ms</span>
            <input type="range" id="inetJitter" min="0" max="1000"  oninput="updateSpan(this)">
            <div style="height: 5px;"></div>
            <input type="button" onclick="inetNetemUpdate()" value="Update">
            <input type="button" onclick="inetNetemReset()" value="Reset">
        </div>
    </div>
    <div style="width: 40%; height: 100%; text-align: center; display: inline-block; float: left;">
        <br/>
        <div data-netdata="net.{{ internal_interface }}"
             data-host="/netdata/"
             data-title="Download Speed"
             data-chart-library="gauge"
             data-gauge-max-value="10000"
             data-gauge-adjust="width"
             data-width="90%"
             data-height="100%"
             data-after="-30"
             data-colors="#00ADEF"
             ></div>
    </div>
    <div style="width: 40%; height: 100%; float: left; position: relative;">
        <div style="height: calc(100% - 20px);">
            <div style="text-align: center; display: inline-block;">
                <H1>Test Results</H1>
                <table id="wgetTimes" style="padding: 10px;">
                    <tr>
                        <th style="padding: 10px; text-align: center;">Optimization<br>Setting</th>
                        <th style="padding: 10px; text-align: center;">Window<br>Size</th>
                        <th style="padding: 10px; text-align: center;">Added<br>Loss</th>
                        <th style="padding: 10px; text-align: center;">Added<br>Latency</th>
                        <th style="padding: 10px; text-align: center;">Added<br>Jitter</th>
                        <th style="padding: 10px; text-align: center;">Download<br>Time</th>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>
<div style="width: 100%; height: 20px; text-align: center; display: inline-block;">
    <input id="download" type="button" value="Download file" onclick="downloadFile();">
</div>
</body>
<script>
function updateSpan(field) {
  document.getElementById(field.id+"Span").innerHTML = field.value;
}

function toggleSopt(ss) {
  if (ss.checked === false) {
    console.log("turning off session optimization");
    sopt.setState("disabled", function(err, results){
      if (err) {
        console.log("toggleSopt got error");
        console.log(err);
      } else if (results) {
        console.log("got results");
        if (results.state === "success") {
          document.getElementById("soptState").checked = true;
        } else {
          document.getElementById("soptState").checked = false;
        }
      }
    });
  } else if (ss.checked === true) {
    console.log("turning on session optimization");
    sopt.setState("enabled", function(err, results){
      if (err) {
        console.log("toggleSopt got error");
        console.log(err);
      } else if (results) {
        console.log("got results");
        if (results === "success") {
          document.getElementById("soptState").checked = true;
        } else {
          document.getElementById("soptState").checked = false;
        }
      }
    });
  }
}

function toggleScaling(ss) {
  if (ss.checked === true) {
    console.log("setting window size to large");
    wsc.setSize("large", function(err, results){
      if (err) {
        console.log("toggleScaling got error");
        console.log(err);
      }
    });
  } else if (ss.checked === false) {
    console.log("setting window size to small");
    wsc.setSize("small", function(err, results){
      if (err) {
        console.log("toggleScaling got error");
        console.log(err);
      }
    });
  }
}

function downloadFile() {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( "POST", '/downloadFile/api/downloadFile');
    xmlHttp.send( null );
};

var socket = io.connect('/');
socket.on('svr', function(data) {
    console.log('Got svr event:' + data);
    var resultTable = document.getElementById('wgetTimes');
    var newResult = resultTable.insertRow(-1);
    var optSetting = newResult.insertCell(0);
    var windowSize = newResult.insertCell(1);
    var addedLoss = newResult.insertCell(2);
    var addedDelay = newResult.insertCell(3);
    var addedJitter = newResult.insertCell(4);
    var downloadTime = newResult.insertCell(5);
    if (document.getElementById("windowScaling").checked === true) {
      windowSize.innerHTML = 'large';
    } else {
      windowSize.innerHTML = 'small';
    }
    if (document.getElementById("soptState").checked === true) {
      optSetting.innerHTML = "on";
    } else {
      optSetting.innerHTML = "off";
    }
    addedLoss.innerHTML = document.getElementById("inetLossSpan").innerHTML;
    addedDelay.innerHTML = document.getElementById("inetDelaySpan").innerHTML;
    addedJitter.innerHTML = document.getElementById("inetJitterSpan").innerHTML;
    downloadTime.innerHTML = data;
  });

function inetNetemUpdate() {
  var loss = document.getElementById("inetLoss").value;
  var delay = document.getElementById("inetDelay").value;
  var jitter = document.getElementById("inetJitter").value;

  console.log("setting inet netem filter to - loss: " + loss + "%, delay: " + delay + "ms, jitter: " + jitter + "ms");
  iface.setNetem("internal", loss, delay, jitter, function(err, results) {
    if (err) {
      console.log("setNetem got error");
      console.log(err);
    } else {
      console.log("got results");
      console.log(results);
    }
  })
  iface.getNetem("internal", function(err, results){
    if (err) {
      console.log("setNetem got error");
      console.log(err);
    } else {
      console.log("got results");
      console.log(results);
      document.getElementById("inetLoss").value = results.loss;
      document.getElementById("inetLossSpan").innerHTML = results.loss;
      document.getElementById("inetDelay").value = results.delay;
      document.getElementById("inetDelaySpan").innerHTML = results.delay;
      document.getElementById("inetJitter").value = results.jitter;
      document.getElementById("inetJitterSpan").innerHTML = results.jitter;
    }
  })
}

function inetNetemReset() {
  console.log("Resetting inet netem filter to zero")
  iface.setNetem("internal", 0, 0, 0, function(err,results) {
    if (err) {
      console.log("inetNetemRese got error");
      console.log(err);
    } else {
      console.log("got results");
      console.log(results);
    }
  })
  iface.getNetem("internal", function(err, results){
    if (err) {
      console.log("getNetem got error");
      console.log(err);
    } else {
      console.log("got results");
      console.log(results);
      document.getElementById("inetLoss").value = results.loss;
      document.getElementById("inetLossSpan").innerHTML = results.loss;
      document.getElementById("inetDelay").value = results.delay;
      document.getElementById("inetDelaySpan").innerHTML = results.delay;
      document.getElementById("inetJitter").value = results.jitter;
      document.getElementById("inetJitterSpan").innerHTML = results.jitter;
    }
  })
}

/*
*   Get initial values of netem filters and set input boxes
*/
sopt.getState(function(err, results){
  if (err) {
    console.log("getState got error");
    console.log(err);
  } else {
    console.log("got session opt state: " + results.state);
    if (results.state === "enabled") {
      document.getElementById("soptState").checked = true;
    } else if (results.state === "disabled") {
      document.getElementById("soptState").checked = false;
    }
  }
})

wsc.getSize(function(err, results){
  if (err) {
    console.log("getSize got error");
    console.log(err);
  } else {
    console.log("got window scaling: " + results.size);
    if (results.size === "large") {
      document.getElementById("windowScaling").checked = true;
    } else if (results.size === "small") {
      document.getElementById("windowScaling").checked = false;
    }
  }
})

iface.getNetem("internal", function(err, results){
  if (err) {
    console.log("getNetem got error");
    console.log(err);
  } else {
    console.log("got results");
    console.log(results);
    document.getElementById("inetLoss").value = results.loss;
    document.getElementById("inetLossSpan").innerHTML = results.loss;
    document.getElementById("inetDelay").value = results.delay;
    document.getElementById("inetDelaySpan").innerHTML = results.delay;
    document.getElementById("inetJitter").value = results.jitter;
    document.getElementById("inetJitterSpan").innerHTML = results.jitter;
  }
})

</script>
</html>
